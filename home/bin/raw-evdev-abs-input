#!/usr/bin/env python3
from sys import argv
from signal import SIGTERM
import asyncio
from Xlib import display
from evdev import InputDevice, categorize, ecodes, util

inverted = argv[2] == "inverted"
print("Inverted:", inverted)

dev_path = argv[1]
print("Opening", dev_path)
dev = InputDevice(dev_path)

xlib_display = display.Display()

async def listen(dev, display):
    screen = display.screen()
    root = screen.root

    input_x_max = dev.absinfo(ecodes.ABS_X).max
    input_y_max = dev.absinfo(ecodes.ABS_Y).max
    screen_x_max = screen.width_in_pixels
    screen_y_max = screen.height_in_pixels

    input_x_current = 0
    input_y_current = 0
    screen_x_current = 0
    screen_y_current = 0
    async for event in dev.async_read_loop():
        if event.type == ecodes.EV_ABS:
            new_screen_x_current = screen_x_current
            new_screen_y_current = screen_y_current
            if event.code == ecodes.ABS_X:
                input_x_current = event.value / input_x_max
                if inverted:
                    input_x_current = 1 - input_x_current
                new_screen_x_current = round(input_x_current * screen_x_max)

            if event.code == ecodes.ABS_Y:
                input_y_current = event.value / input_y_max
                if inverted:
                    input_y_current = 1 - input_y_current
                new_screen_y_current = round(input_y_current * screen_y_max)

            if new_screen_x_current != screen_x_current or new_screen_y_current != screen_y_current:
                root.warp_pointer(screen_x_current, screen_y_current)
                display.sync()

            screen_x_current = new_screen_x_current
            screen_y_current = new_screen_y_current

async def main():
    print("Grabbing", dev_path)
    dev.grab()

    task = asyncio.create_task(listen(dev, xlib_display))

    def cancel(*_):
        task.cancel()
    asyncio.get_running_loop().add_signal_handler(SIGTERM, cancel)

    try:
        await task
        print("Event loop ended")
    except asyncio.CancelledError:
        print("Event loop cancelled")
    print("Ungrabbing", dev_path)
    dev.ungrab()

asyncio.run(main())
